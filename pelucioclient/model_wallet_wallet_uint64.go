/*
Pelucio backend API

Pelucio backend http endpoints

API version: 1.0
Contact: contato@fourengine.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pelucioclient

import (
	"encoding/json"
)

// checks if the WalletWalletUint64 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletWalletUint64{}

// WalletWalletUint64 struct for WalletWalletUint64
type WalletWalletUint64 struct {
	Balance *map[string]int32 `json:"balance,omitempty"`
	CreatedAt *string `json:"createdAt,omitempty"`
	Id *string `json:"id,omitempty"`
	LockedBalance *map[string]int32 `json:"lockedBalance,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewWalletWalletUint64 instantiates a new WalletWalletUint64 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletWalletUint64() *WalletWalletUint64 {
	this := WalletWalletUint64{}
	return &this
}

// NewWalletWalletUint64WithDefaults instantiates a new WalletWalletUint64 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletWalletUint64WithDefaults() *WalletWalletUint64 {
	this := WalletWalletUint64{}
	return &this
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *WalletWalletUint64) GetBalance() map[string]int32 {
	if o == nil || IsNil(o.Balance) {
		var ret map[string]int32
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletWalletUint64) GetBalanceOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *WalletWalletUint64) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given map[string]int32 and assigns it to the Balance field.
func (o *WalletWalletUint64) SetBalance(v map[string]int32) {
	o.Balance = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *WalletWalletUint64) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletWalletUint64) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *WalletWalletUint64) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *WalletWalletUint64) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WalletWalletUint64) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletWalletUint64) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WalletWalletUint64) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WalletWalletUint64) SetId(v string) {
	o.Id = &v
}

// GetLockedBalance returns the LockedBalance field value if set, zero value otherwise.
func (o *WalletWalletUint64) GetLockedBalance() map[string]int32 {
	if o == nil || IsNil(o.LockedBalance) {
		var ret map[string]int32
		return ret
	}
	return *o.LockedBalance
}

// GetLockedBalanceOk returns a tuple with the LockedBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletWalletUint64) GetLockedBalanceOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.LockedBalance) {
		return nil, false
	}
	return o.LockedBalance, true
}

// HasLockedBalance returns a boolean if a field has been set.
func (o *WalletWalletUint64) HasLockedBalance() bool {
	if o != nil && !IsNil(o.LockedBalance) {
		return true
	}

	return false
}

// SetLockedBalance gets a reference to the given map[string]int32 and assigns it to the LockedBalance field.
func (o *WalletWalletUint64) SetLockedBalance(v map[string]int32) {
	o.LockedBalance = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *WalletWalletUint64) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletWalletUint64) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *WalletWalletUint64) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *WalletWalletUint64) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *WalletWalletUint64) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletWalletUint64) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *WalletWalletUint64) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *WalletWalletUint64) SetVersion(v string) {
	o.Version = &v
}

func (o WalletWalletUint64) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletWalletUint64) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LockedBalance) {
		toSerialize["lockedBalance"] = o.LockedBalance
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableWalletWalletUint64 struct {
	value *WalletWalletUint64
	isSet bool
}

func (v NullableWalletWalletUint64) Get() *WalletWalletUint64 {
	return v.value
}

func (v *NullableWalletWalletUint64) Set(val *WalletWalletUint64) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletWalletUint64) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletWalletUint64) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletWalletUint64(val *WalletWalletUint64) *NullableWalletWalletUint64 {
	return &NullableWalletWalletUint64{value: val, isSet: true}
}

func (v NullableWalletWalletUint64) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletWalletUint64) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


