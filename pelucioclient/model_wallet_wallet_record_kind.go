/*
Pelucio backend API

Pelucio backend http endpoints

API version: 1.0
Contact: contato@fourengine.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pelucioclient

import (
	"encoding/json"
	"fmt"
)

// WalletWalletRecordKind the model 'WalletWalletRecordKind'
type WalletWalletRecordKind int32

// List of wallet.WalletRecordKind
const (
	WALLETWALLETRECORDKIND_Sum WalletWalletRecordKind = 1
	WALLETWALLETRECORDKIND_Sub WalletWalletRecordKind = 2
	WALLETWALLETRECORDKIND_Lock WalletWalletRecordKind = 3
	WALLETWALLETRECORDKIND_Unlock WalletWalletRecordKind = 4
)

// All allowed values of WalletWalletRecordKind enum
var AllowedWalletWalletRecordKindEnumValues = []WalletWalletRecordKind{
	1,
	2,
	3,
	4,
}

func (v *WalletWalletRecordKind) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WalletWalletRecordKind(value)
	for _, existing := range AllowedWalletWalletRecordKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WalletWalletRecordKind", value)
}

// NewWalletWalletRecordKindFromValue returns a pointer to a valid WalletWalletRecordKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWalletWalletRecordKindFromValue(v int32) (*WalletWalletRecordKind, error) {
	ev := WalletWalletRecordKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WalletWalletRecordKind: valid values are %v", v, AllowedWalletWalletRecordKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WalletWalletRecordKind) IsValid() bool {
	for _, existing := range AllowedWalletWalletRecordKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to wallet.WalletRecordKind value
func (v WalletWalletRecordKind) Ptr() *WalletWalletRecordKind {
	return &v
}

type NullableWalletWalletRecordKind struct {
	value *WalletWalletRecordKind
	isSet bool
}

func (v NullableWalletWalletRecordKind) Get() *WalletWalletRecordKind {
	return v.value
}

func (v *NullableWalletWalletRecordKind) Set(val *WalletWalletRecordKind) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletWalletRecordKind) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletWalletRecordKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletWalletRecordKind(val *WalletWalletRecordKind) *NullableWalletWalletRecordKind {
	return &NullableWalletWalletRecordKind{value: val, isSet: true}
}

func (v NullableWalletWalletRecordKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletWalletRecordKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

