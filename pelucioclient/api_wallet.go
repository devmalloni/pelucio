/*
Pelucio backend API

Pelucio backend http endpoints

API version: 1.0
Contact: contato@fourengine.com.br
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pelucioclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type WalletAPI interface {

	/*
	V1AdminWalletIdBurnPost Burn Transaction

	burn funds from one wallet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Wallet id
	@return WalletAPIV1AdminWalletIdBurnPostRequest
	*/
	V1AdminWalletIdBurnPost(ctx context.Context, id string) WalletAPIV1AdminWalletIdBurnPostRequest

	// V1AdminWalletIdBurnPostExecute executes the request
	V1AdminWalletIdBurnPostExecute(r WalletAPIV1AdminWalletIdBurnPostRequest) (*http.Response, error)

	/*
	V1AdminWalletIdLockPost Lock Transaction

	lock funds from one wallet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Wallet id
	@return WalletAPIV1AdminWalletIdLockPostRequest
	*/
	V1AdminWalletIdLockPost(ctx context.Context, id string) WalletAPIV1AdminWalletIdLockPostRequest

	// V1AdminWalletIdLockPostExecute executes the request
	V1AdminWalletIdLockPostExecute(r WalletAPIV1AdminWalletIdLockPostRequest) (*http.Response, error)

	/*
	V1AdminWalletIdMintPost Mint Transaction

	mint funds from one wallet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Wallet id
	@return WalletAPIV1AdminWalletIdMintPostRequest
	*/
	V1AdminWalletIdMintPost(ctx context.Context, id string) WalletAPIV1AdminWalletIdMintPostRequest

	// V1AdminWalletIdMintPostExecute executes the request
	V1AdminWalletIdMintPostExecute(r WalletAPIV1AdminWalletIdMintPostRequest) (*http.Response, error)

	/*
	V1AdminWalletIdMintandlockPost Unlock and burn Transaction

	unlock funds and burn that same funds from one wallet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Wallet id
	@return WalletAPIV1AdminWalletIdMintandlockPostRequest
	*/
	V1AdminWalletIdMintandlockPost(ctx context.Context, id string) WalletAPIV1AdminWalletIdMintandlockPostRequest

	// V1AdminWalletIdMintandlockPostExecute executes the request
	V1AdminWalletIdMintandlockPostExecute(r WalletAPIV1AdminWalletIdMintandlockPostRequest) (*http.Response, error)

	/*
	V1AdminWalletIdUnlockPost Unlock Transaction

	unlock funds from one wallet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Wallet id
	@return WalletAPIV1AdminWalletIdUnlockPostRequest
	*/
	V1AdminWalletIdUnlockPost(ctx context.Context, id string) WalletAPIV1AdminWalletIdUnlockPostRequest

	// V1AdminWalletIdUnlockPostExecute executes the request
	V1AdminWalletIdUnlockPostExecute(r WalletAPIV1AdminWalletIdUnlockPostRequest) (*http.Response, error)

	/*
	V1AdminWalletPost Create a wallet

	create a wallet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WalletAPIV1AdminWalletPostRequest
	*/
	V1AdminWalletPost(ctx context.Context) WalletAPIV1AdminWalletPostRequest

	// V1AdminWalletPostExecute executes the request
	//  @return WalletWalletUint64
	V1AdminWalletPostExecute(r WalletAPIV1AdminWalletPostRequest) (*WalletWalletUint64, *http.Response, error)

	/*
	V1OpenWalletIdGet Get Wallet

	Get wallet infos by ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Wallet id
	@return WalletAPIV1OpenWalletIdGetRequest
	*/
	V1OpenWalletIdGet(ctx context.Context, id string) WalletAPIV1OpenWalletIdGetRequest

	// V1OpenWalletIdGetExecute executes the request
	//  @return WalletWalletUint64
	V1OpenWalletIdGetExecute(r WalletAPIV1OpenWalletIdGetRequest) (*WalletWalletUint64, *http.Response, error)

	/*
	V1OpenWalletIdRecordsGet Get Wallet records

	Get wallet records infos by ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Wallet id
	@return WalletAPIV1OpenWalletIdRecordsGetRequest
	*/
	V1OpenWalletIdRecordsGet(ctx context.Context, id string) WalletAPIV1OpenWalletIdRecordsGetRequest

	// V1OpenWalletIdRecordsGetExecute executes the request
	//  @return []WalletWalletRecord
	V1OpenWalletIdRecordsGetExecute(r WalletAPIV1OpenWalletIdRecordsGetRequest) ([]WalletWalletRecord, *http.Response, error)

	/*
	V1OpenWalletTransferPost Transfer Transaction

	transfer funds from one wallet to another

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Wallet id
	@return WalletAPIV1OpenWalletTransferPostRequest
	*/
	V1OpenWalletTransferPost(ctx context.Context, id string) WalletAPIV1OpenWalletTransferPostRequest

	// V1OpenWalletTransferPostExecute executes the request
	V1OpenWalletTransferPostExecute(r WalletAPIV1OpenWalletTransferPostRequest) (*http.Response, error)
}

// WalletAPIService WalletAPI service
type WalletAPIService service

type WalletAPIV1AdminWalletIdBurnPostRequest struct {
	ctx context.Context
	ApiService WalletAPI
	id string
	model *WalletAmountModel
}

// Amount model
func (r WalletAPIV1AdminWalletIdBurnPostRequest) Model(model WalletAmountModel) WalletAPIV1AdminWalletIdBurnPostRequest {
	r.model = &model
	return r
}

func (r WalletAPIV1AdminWalletIdBurnPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1AdminWalletIdBurnPostExecute(r)
}

/*
V1AdminWalletIdBurnPost Burn Transaction

burn funds from one wallet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Wallet id
 @return WalletAPIV1AdminWalletIdBurnPostRequest
*/
func (a *WalletAPIService) V1AdminWalletIdBurnPost(ctx context.Context, id string) WalletAPIV1AdminWalletIdBurnPostRequest {
	return WalletAPIV1AdminWalletIdBurnPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WalletAPIService) V1AdminWalletIdBurnPostExecute(r WalletAPIV1AdminWalletIdBurnPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.V1AdminWalletIdBurnPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/admin/wallet/{id}/burn"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.model == nil {
		return nil, reportError("model is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.model
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type WalletAPIV1AdminWalletIdLockPostRequest struct {
	ctx context.Context
	ApiService WalletAPI
	id string
	model *WalletAmountModel
}

// Amount model
func (r WalletAPIV1AdminWalletIdLockPostRequest) Model(model WalletAmountModel) WalletAPIV1AdminWalletIdLockPostRequest {
	r.model = &model
	return r
}

func (r WalletAPIV1AdminWalletIdLockPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1AdminWalletIdLockPostExecute(r)
}

/*
V1AdminWalletIdLockPost Lock Transaction

lock funds from one wallet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Wallet id
 @return WalletAPIV1AdminWalletIdLockPostRequest
*/
func (a *WalletAPIService) V1AdminWalletIdLockPost(ctx context.Context, id string) WalletAPIV1AdminWalletIdLockPostRequest {
	return WalletAPIV1AdminWalletIdLockPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WalletAPIService) V1AdminWalletIdLockPostExecute(r WalletAPIV1AdminWalletIdLockPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.V1AdminWalletIdLockPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/admin/wallet/{id}/lock"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.model == nil {
		return nil, reportError("model is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.model
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type WalletAPIV1AdminWalletIdMintPostRequest struct {
	ctx context.Context
	ApiService WalletAPI
	id string
	model *WalletAmountModel
}

// Amount model
func (r WalletAPIV1AdminWalletIdMintPostRequest) Model(model WalletAmountModel) WalletAPIV1AdminWalletIdMintPostRequest {
	r.model = &model
	return r
}

func (r WalletAPIV1AdminWalletIdMintPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1AdminWalletIdMintPostExecute(r)
}

/*
V1AdminWalletIdMintPost Mint Transaction

mint funds from one wallet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Wallet id
 @return WalletAPIV1AdminWalletIdMintPostRequest
*/
func (a *WalletAPIService) V1AdminWalletIdMintPost(ctx context.Context, id string) WalletAPIV1AdminWalletIdMintPostRequest {
	return WalletAPIV1AdminWalletIdMintPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WalletAPIService) V1AdminWalletIdMintPostExecute(r WalletAPIV1AdminWalletIdMintPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.V1AdminWalletIdMintPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/admin/wallet/{id}/mint"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.model == nil {
		return nil, reportError("model is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.model
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type WalletAPIV1AdminWalletIdMintandlockPostRequest struct {
	ctx context.Context
	ApiService WalletAPI
	id string
	model *WalletAmountModel
}

// Amount model
func (r WalletAPIV1AdminWalletIdMintandlockPostRequest) Model(model WalletAmountModel) WalletAPIV1AdminWalletIdMintandlockPostRequest {
	r.model = &model
	return r
}

func (r WalletAPIV1AdminWalletIdMintandlockPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1AdminWalletIdMintandlockPostExecute(r)
}

/*
V1AdminWalletIdMintandlockPost Unlock and burn Transaction

unlock funds and burn that same funds from one wallet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Wallet id
 @return WalletAPIV1AdminWalletIdMintandlockPostRequest
*/
func (a *WalletAPIService) V1AdminWalletIdMintandlockPost(ctx context.Context, id string) WalletAPIV1AdminWalletIdMintandlockPostRequest {
	return WalletAPIV1AdminWalletIdMintandlockPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WalletAPIService) V1AdminWalletIdMintandlockPostExecute(r WalletAPIV1AdminWalletIdMintandlockPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.V1AdminWalletIdMintandlockPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/admin/wallet/{id}/mintandlock"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.model == nil {
		return nil, reportError("model is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.model
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type WalletAPIV1AdminWalletIdUnlockPostRequest struct {
	ctx context.Context
	ApiService WalletAPI
	id string
	model *WalletAmountModel
}

// Amount model
func (r WalletAPIV1AdminWalletIdUnlockPostRequest) Model(model WalletAmountModel) WalletAPIV1AdminWalletIdUnlockPostRequest {
	r.model = &model
	return r
}

func (r WalletAPIV1AdminWalletIdUnlockPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1AdminWalletIdUnlockPostExecute(r)
}

/*
V1AdminWalletIdUnlockPost Unlock Transaction

unlock funds from one wallet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Wallet id
 @return WalletAPIV1AdminWalletIdUnlockPostRequest
*/
func (a *WalletAPIService) V1AdminWalletIdUnlockPost(ctx context.Context, id string) WalletAPIV1AdminWalletIdUnlockPostRequest {
	return WalletAPIV1AdminWalletIdUnlockPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WalletAPIService) V1AdminWalletIdUnlockPostExecute(r WalletAPIV1AdminWalletIdUnlockPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.V1AdminWalletIdUnlockPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/admin/wallet/{id}/unlock"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.model == nil {
		return nil, reportError("model is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.model
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type WalletAPIV1AdminWalletPostRequest struct {
	ctx context.Context
	ApiService WalletAPI
	model *WalletCreateWalletModel
}

// Create wallet model
func (r WalletAPIV1AdminWalletPostRequest) Model(model WalletCreateWalletModel) WalletAPIV1AdminWalletPostRequest {
	r.model = &model
	return r
}

func (r WalletAPIV1AdminWalletPostRequest) Execute() (*WalletWalletUint64, *http.Response, error) {
	return r.ApiService.V1AdminWalletPostExecute(r)
}

/*
V1AdminWalletPost Create a wallet

create a wallet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WalletAPIV1AdminWalletPostRequest
*/
func (a *WalletAPIService) V1AdminWalletPost(ctx context.Context) WalletAPIV1AdminWalletPostRequest {
	return WalletAPIV1AdminWalletPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WalletWalletUint64
func (a *WalletAPIService) V1AdminWalletPostExecute(r WalletAPIV1AdminWalletPostRequest) (*WalletWalletUint64, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletWalletUint64
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.V1AdminWalletPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/admin/wallet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.model == nil {
		return localVarReturnValue, nil, reportError("model is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.model
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WalletAPIV1OpenWalletIdGetRequest struct {
	ctx context.Context
	ApiService WalletAPI
	id string
}

func (r WalletAPIV1OpenWalletIdGetRequest) Execute() (*WalletWalletUint64, *http.Response, error) {
	return r.ApiService.V1OpenWalletIdGetExecute(r)
}

/*
V1OpenWalletIdGet Get Wallet

Get wallet infos by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Wallet id
 @return WalletAPIV1OpenWalletIdGetRequest
*/
func (a *WalletAPIService) V1OpenWalletIdGet(ctx context.Context, id string) WalletAPIV1OpenWalletIdGetRequest {
	return WalletAPIV1OpenWalletIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WalletWalletUint64
func (a *WalletAPIService) V1OpenWalletIdGetExecute(r WalletAPIV1OpenWalletIdGetRequest) (*WalletWalletUint64, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WalletWalletUint64
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.V1OpenWalletIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/open/wallet/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WalletAPIV1OpenWalletIdRecordsGetRequest struct {
	ctx context.Context
	ApiService WalletAPI
	id string
}

func (r WalletAPIV1OpenWalletIdRecordsGetRequest) Execute() ([]WalletWalletRecord, *http.Response, error) {
	return r.ApiService.V1OpenWalletIdRecordsGetExecute(r)
}

/*
V1OpenWalletIdRecordsGet Get Wallet records

Get wallet records infos by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Wallet id
 @return WalletAPIV1OpenWalletIdRecordsGetRequest
*/
func (a *WalletAPIService) V1OpenWalletIdRecordsGet(ctx context.Context, id string) WalletAPIV1OpenWalletIdRecordsGetRequest {
	return WalletAPIV1OpenWalletIdRecordsGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []WalletWalletRecord
func (a *WalletAPIService) V1OpenWalletIdRecordsGetExecute(r WalletAPIV1OpenWalletIdRecordsGetRequest) ([]WalletWalletRecord, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WalletWalletRecord
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.V1OpenWalletIdRecordsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/open/wallet/{id}/records"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WalletAPIV1OpenWalletTransferPostRequest struct {
	ctx context.Context
	ApiService WalletAPI
	id string
	model *WalletTransferModel
}

// Transfer data
func (r WalletAPIV1OpenWalletTransferPostRequest) Model(model WalletTransferModel) WalletAPIV1OpenWalletTransferPostRequest {
	r.model = &model
	return r
}

func (r WalletAPIV1OpenWalletTransferPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.V1OpenWalletTransferPostExecute(r)
}

/*
V1OpenWalletTransferPost Transfer Transaction

transfer funds from one wallet to another

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Wallet id
 @return WalletAPIV1OpenWalletTransferPostRequest
*/
func (a *WalletAPIService) V1OpenWalletTransferPost(ctx context.Context, id string) WalletAPIV1OpenWalletTransferPostRequest {
	return WalletAPIV1OpenWalletTransferPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WalletAPIService) V1OpenWalletTransferPostExecute(r WalletAPIV1OpenWalletTransferPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletAPIService.V1OpenWalletTransferPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/open/wallet/transfer"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.model == nil {
		return nil, reportError("model is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.model
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
